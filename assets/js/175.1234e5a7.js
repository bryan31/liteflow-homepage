(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{637:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("版本支持：")]),a("Badge",{attrs:{text:"v2.9.7+",vertical:"middle"}})],1),t._v(" "),a("h2",{attrs:{id:"用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),a("p",[t._v("LiteFlow支持了迭代循环组件，相当于Java语言的"),a("code",[t._v("Iterator")]),t._v("关键字，主要用于"),a("code",[t._v("ITERATOR...DO...")]),t._v("表达式。")]),t._v(" "),a("p",[t._v("关于"),a("code",[t._v("ITERATOR...DO...")]),t._v("表达式的用法，可以参考"),a("RouterLink",{attrs:{to:"/pages/v2.12.X/fbf715/"}},[t._v("循环编排")]),t._v("这一章。")],1),t._v(" "),a("p",[t._v("比如要进行迭代循环操作，可以如下定义：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ITERATOR(x).DO(THEN(a, b));\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("x节点的定义，需要继承"),a("code",[t._v("NodeIteratorComponent")]),t._v("，需要实现"),a("code",[t._v("processIterator")]),t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LiteflowComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XCmp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeIteratorComponent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mary"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("内部可以覆盖的方法和this关键字可调用的方法见"),a("RouterLink",{attrs:{to:"/pages/v2.12.X/8486fb/"}},[t._v("普通组件")]),t._v("这一章。")],1),t._v(" "),a("h2",{attrs:{id:"当前迭代对象的获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当前迭代对象的获取"}},[t._v("#")]),t._v(" 当前迭代对象的获取")]),t._v(" "),a("p",[t._v("关键字"),a("code",[t._v("ITERATOR...DO...")]),t._v("中"),a("code",[t._v("DO")]),t._v("里面所有的节点都可以通过"),a("code",[t._v("this.getCurrLoopObj()")]),t._v("获得迭代循环的当前对象。")]),t._v(" "),a("p",[t._v("在脚本中通过"),a("code",[t._v("_meta.loopObject")]),t._v("来获取。")]),t._v(" "),a("h2",{attrs:{id:"多层嵌套循环中获取迭代对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多层嵌套循环中获取迭代对象"}},[t._v("#")]),t._v(" 多层嵌套循环中获取迭代对象"),a("Badge",{attrs:{text:"v2.12.3+"}})],1),t._v(" "),a("p",[t._v("如果在一个3层嵌套循环里：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ITERATOR(x).DO(\n        ITERATOR(y).DO(\n            ITERATOR(z).DO(\n                THEN(a,b)\n            )\n        )\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("a组件要取到当前迭代对象："),a("code",[t._v("this.getCurrLoopObj()")]),t._v("或者"),a("code",[t._v("this.getPreNLoopObj(0)")]),t._v("，这2者是等价的")]),t._v(" "),a("p",[t._v("a组件要取到第二层迭代对象："),a("code",[t._v("this.getPreLoopObj()")]),t._v("或者"),a("code",[t._v("this.getPreNLoopObj(1)")]),t._v("，这2者是等价的")]),t._v(" "),a("p",[t._v("a组件要取到第一层迭代对象："),a("code",[t._v("this.getPreNLoopObj(2)")])]),t._v(" "),a("p",[t._v("唯一要关注的就是"),a("code",[t._v("getPreNLoopObj")]),t._v("这个方法，里面的数字代表了"),a("strong",[t._v("往前")]),t._v("取多少层，数字0就代表了当前层。以此类推。")])])}),[],!1,null,null,null);a.default=e.exports}}]);