(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{704:function(a,t,s){"use strict";s.r(t);var e=s(8),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("strong",[a._v("版本支持：")]),t("Badge",{attrs:{text:"v2.11.0+",vertical:"middle"}})],1),a._v(" "),t("p",[a._v("LiteFlow支持循环表达式的异步模式，使得各个循环表达式的循环子项可以异步执行。")]),a._v(" "),t("h2",{attrs:{id:"使用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[a._v("#")]),a._v(" 使用方法")]),a._v(" "),t("p",[a._v("对于LiteFlow中的次数循环表达式、条件循环表达式以及迭代循环表达式等循环表达式，可以使用"),t("code",[a._v("parallel")]),a._v("子关键字（默认为false）来配置循环子项的执行方式，使其成为异步模式的循环表达式（所谓异步模式，就是各个循环子项之间并行执行）。")]),a._v(" "),t("p",[a._v("如果"),t("code",[a._v("parallel")]),a._v("子关键字设置为"),t("code",[a._v("true")]),a._v("，表示各循环子项之间并行执行，否则各循环子项之间串行执行。")]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),t("p",[a._v("对于次数循环表达式，可以这样配置，使其各个循环子项并行执行：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n   FOR(2).parallel(true).DO(THEN(a,b,c));\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("如果使用上述配置，每个循环子项本身的执行方式保持不变，只是各个循环子项之间的执行方式变为并行执行，也就是chain1会并行执行两次THEN(a,b,c)。")]),a._v(" "),t("p",[a._v("对于条件循环表达式，可以这样配置，使其各个循环子项并行执行：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n   WHILE(x).parallel(true).DO(THEN(a,b,c));\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("对于迭代循环表达式，可以这样配置，使其各个循环子项并行执行：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain7"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n   ITERATOR(x).parallel(true).DO(THEN(a,b,c));\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h2",{attrs:{id:"使用说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用说明"}},[a._v("#")]),a._v(" 使用说明")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("parallel")]),a._v("子关键字只能用于次数循环表达式、条件循环表达式以及迭代循环表达式等循环表达式。")]),a._v(" "),t("li",[a._v("对于异步模式的条件循环表达式，会不断创建并行执行循环子项，直到条件不满足为止。")]),a._v(" "),t("li",[a._v("异步模式依然支持BREAK，当退出循环组件返回为true时，会停止向线程池提交新的任务，但是已经提交的任务会继续执行。循环组件会在所有已提交任务执行完毕后退出。")]),a._v(" "),t("li",[a._v("默认情况下，异步模式的下各循环子项会在liteFlow提供的默认异步循环线程池中执行，并且可以通过如下两个参数来控制默认线程池的workers数目和队列长度"),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!--配置默认线程池的worker数目--\x3e")]),a._v("\nliteflow.parallel-max-workers=16\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!--配置默认线程池的队列长度--\x3e")]),a._v("\nliteflow.parallel-queue-limit=512\n")])])]),a._v("当然，也可以通过自定义线程池来执行异步模式的循环子项，只需要在配置文件中进行如下配置即可，不过此时上述两个参数将不再生效。"),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!--用户可以直接指定自定义的线程池全类名的方式指定异步循环线程池--\x3e")]),a._v("\nliteflow.parallel-loop-executor-class=com.yomahub.liteflow.test.customThreadPool.CustomThreadBuilder\n")])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);