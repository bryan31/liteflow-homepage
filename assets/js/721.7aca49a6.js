(window.webpackJsonp=window.webpackJsonp||[]).push([[721],{1184:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"v2-11-2介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v2-11-2介绍"}},[t._v("#")]),t._v(" v2.11.2介绍")]),t._v(" "),a("p",[t._v("上一个版本是9月1日发布的，经过了一个半月，LiteFlow新的v2.11.2和大家见面了。")]),t._v(" "),a("p",[t._v("这个版本总共带来了7个大特性，3个增强，2个修复。总计12个issue的更新。")]),t._v(" "),a("p",[t._v("其实这已经比上一个大版本已经有过之而无不及了。")]),t._v(" "),a("p",[t._v("这一切归功于LiteFlow的团队小伙伴们，目前团队正式成员一共有11人，他们贡献了这个版本中的诸多的特性，感谢他们。")]),t._v(" "),a("h2",{attrs:{id:"sql插件支持轮询自动更新模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql插件支持轮询自动更新模式"}},[t._v("#")]),t._v(" SQL插件支持轮询自动更新模式")]),t._v(" "),a("p",[t._v("LiteFlow支持把规则和脚本存入任意的关系型数据库，由于关系型数据库不像注册中心会进行推送变更，所以一直以来，规则和脚本在数据库中发生改变，是需要开发者自己手动的去刷新的。并且需要每个应用实例都进行刷新。这对开发者来说，是繁琐了点。")]),t._v(" "),a("p",[t._v("所以我们在v2.11.2中推出了数据库自动轮询更新模式。这一切只需要在你原来的配置中加入：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("liteflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rule-source-ext-data-map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#是否开启SQL数据轮询自动刷新机制 默认不开启")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pollingEnabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("默认LiteFlow会每1分钟去进行SHA值的对比，由此来判断是否需要更新。")]),t._v(" "),a("p",[t._v("具体使用方式请参考"),a("code",[t._v("规则文件->SQL数据库配置源")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"when增加must语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when增加must语法"}},[t._v("#")]),t._v(" WHEN增加must语法")]),t._v(" "),a("p",[t._v("之前"),a("code",[t._v("WHEN")]),t._v("推出过"),a("code",[t._v("any")]),t._v("语法，意思是任意一个完成即继续，而忽略其他。但是在社区里有小伙伴碰到真实的场景，需要异步并行中对指定的节点先完成就忽略其他。")]),t._v(" "),a("p",[t._v("为此这次新版本中推出了全新的"),a("code",[t._v("must")]),t._v("语法，提供在并行编排中更多的多样性。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, c, d).must(b, c),\n        f\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("也可以指定一个或多个表达式：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n    THEN(\n        a,\n        WHEN(b, THEN(c, d).id("t1"), e).must(b, "t1"),\n        f\n    );\n'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("具体使用方式请参考"),a("code",[t._v("EL规则的写法->并行编排->指定任意节点先执行完则忽略其他")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"推出el表达式的动态组装api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推出el表达式的动态组装api"}},[t._v("#")]),t._v(" 推出EL表达式的动态组装API")]),t._v(" "),a("p",[t._v("之前LiteFlow推出过动态构建chain的API，类似于这样：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiteFlowChainELBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setChainName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chain1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"THEN(a, b, WHEN(c, d))"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("但是EL表达式还是需要你自己以字符串的方式填入，这并不能算真正意义上动态。")]),t._v(" "),a("p",[t._v("这次我们推出了全新的EL表达式的动态组装API，对于上面的EL，你可以如下进行动态构建：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThenELWrapper")]),t._v(" el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ELBus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ELBus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("when")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiteFlowChainELBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setChainName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chain1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("值得一说的是，用java语言构建EL表达式，几乎和EL的写法完全一致。如果你已经熟悉了LiteFlow的规则语法，应该是零成本上手的。")]),t._v(" "),a("p",[t._v("目前API支持了所有的EL语法。具体使用方式请参考"),a("code",[t._v("用代码构造规则->构造EL")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"链路继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链路继承"}},[t._v("#")]),t._v(" 链路继承")]),t._v(" "),a("p",[t._v("LiteFlow每一个chain独立，之前的版本不存在继承关系。但在这个新版本中，我们推出了链路继承这个特性。")]),t._v(" "),a("p",[t._v("如同类的继承一样，链路可以继承，那么对于拥有复杂链路的业务系统，可以对链路进行抽象，得到一个非常优雅的表现方式。")]),t._v(" "),a("p",[t._v("我们定义的继承也非常容易看懂：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\tTHEN(a, b, {0}, {1});\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("implA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t{0}=IF(c, d, e);\n\t{1}=SWITCH(f).to(j,k);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("还可以多级继承：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\tTHEN(a, b, {0}, {1});\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  {0}=THEN(a,b,{3});\n  {1}=SWITCH(f).to({4},k);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("implB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("base2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  {3}=THEN(a,b);\n  {4}=j;\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("如果你有此方面的场景，不妨尝试下继承特性。")]),t._v(" "),a("p",[t._v("具体使用方式请参考"),a("code",[t._v("高级特性->链路继承")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"组件降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件降级"}},[t._v("#")]),t._v(" 组件降级")]),t._v(" "),a("p",[t._v("LiteFlow之前的"),a("code",[t._v("替补组件")]),t._v("全面升级成"),a("code",[t._v("组件降级")]),t._v("特性。")]),t._v(" "),a("p",[t._v("组件降级允许你定义各个类型组件的降级组件。新版本提供了"),a("code",[t._v("@FallbackCmp")]),t._v("注解用于定义。")]),t._v(" "),a("p",[t._v("在EL规则中，如果你用"),a("code",[t._v("node")]),t._v("关键字包裹组件，便开启了降级特性：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n\tTHEN(node("a"), b, c);\n'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("当a组件不存在时，便会走到用"),a("code",[t._v("@FallbackCmp")]),t._v("注解定义的降级组件中去。")]),t._v(" "),a("p",[t._v("具体用法请参考"),a("code",[t._v("高级特定->组件降级")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"支持绝对路径的模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持绝对路径的模糊匹配"}},[t._v("#")]),t._v(" 支持绝对路径的模糊匹配")]),t._v(" "),a("p",[t._v("LiteFlow对项目内的规则文件的模糊匹配是早就支持的。但是之前的版本一直不支持绝对路径的模糊匹配。")]),t._v(" "),a("p",[t._v("这个版本，我们予以了支持。")]),t._v(" "),a("p",[t._v("你可以使用"),a("code",[t._v("*")]),t._v("或者"),a("code",[t._v("**")]),t._v("来模糊匹配多层级的任意名字的文件：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.rule-source")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("/data/lf/**/*Rule.xml")]),t._v("\n")])])]),a("p",[t._v("如果开启了文件监听功能，还能对模糊路径匹配到的每一个文件进行监听。当文件改变的时候，实现自动刷新功能。是不是很酷。")]),t._v(" "),a("p",[t._v("具体用法请参考"),a("code",[t._v("规则文件->本地规则文件配置")]),t._v("和"),a("code",[t._v("高级功能->本地文件监听")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"when线程池隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when线程池隔离"}},[t._v("#")]),t._v(" WHEN线程池隔离")]),t._v(" "),a("p",[t._v("LiteFlow在v2.11.2版本中新推出了一个配置，在执行WHEN中的并行组件时，每一个when的线程池隔离，在运行复杂的嵌套WHEN链路时，这个特性非常有用。可以有效提高运行速度并且避免死锁问题。")]),t._v(" "),a("p",[t._v("你只需要开启这个配置即可，默认是关闭的。")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.when-thread-pool-isolate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("具体用法请参考"),a("code",[t._v("EL规则的写法->并行编排->开启WHEN线程池隔离")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"测试用例增加至1500个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例增加至1500个"}},[t._v("#")]),t._v(" 测试用例增加至1500个")]),t._v(" "),a("p",[t._v("我非常注重开源项目的测试用例，这是一个项目质量的保证。这次新版本LiteFlow把测试用例增加到了1500个！")]),t._v(" "),a("p",[t._v("每一个特性的提交，我们都会保证这么多的测试用例全部通过。这也是我们发布LiteFlow每一个版本的底气。")]),t._v(" "),a("p",[t._v("并且，LiteFlow的测试用例覆盖面非常广，行覆盖率达到了90%，我们始终遵循着测试用例大于一切的标准。")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"100%"},attrs:{src:t.$withBase("/img/whats_new/2_11_1_1.png")}})])}),[],!1,null,null,null);a.default=e.exports}}]);