(window.webpackJsonp=window.webpackJsonp||[]).push([[450],{912:function(a,t,s){"use strict";s.r(t);var e=s(8),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("LiteFlow支持让你自定义你的请求Id。")]),a._v(" "),t("p",[a._v("大家在执行一条流程的时候，往往可以在日志信息中看到以下类似的信息：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("2022-07-03 11:15:00.196  INFO 71275 --- [           main] com.yomahub.liteflow.flow.element.Node   : [067a0baa6d434de3a8ccafa4b1506562]:[O]start component[a] execution\n2022-07-03 11:15:00.204  INFO 71275 --- [           main] com.yomahub.liteflow.flow.element.Node   : [067a0baa6d434de3a8ccafa4b1506562]:[O]start component[b] execution\n2022-07-03 11:15:00.218  INFO 71275 --- [lf-when-thead-0] com.yomahub.liteflow.flow.element.Node   : [067a0baa6d434de3a8ccafa4b1506562]:[O]start component[c] execution\n2022-07-03 11:15:00.220  INFO 71275 --- [lf-when-thead-1] com.yomahub.liteflow.flow.element.Node   : [067a0baa6d434de3a8ccafa4b1506562]:[O]start component[d] execution\n2022-07-03 11:15:00.220  INFO 71275 --- [           main] com.yomahub.liteflow.slot.Slot           : [067a0baa6d434de3a8ccafa4b1506562]:CHAIN_NAME[chain1]\na<1>==>b<0>==>c<0>==>d<0>\n2022-07-03 11:15:00.221  INFO 71275 --- [           main] com.yomahub.liteflow.slot.DataBus        : [067a0baa6d434de3a8ccafa4b1506562]:slot[0] released\n")])])]),t("p",[a._v("其中日志主体中最前面的就是RequestId，一个请求中的requestId都是相同的，方便你进行日志查找。")]),a._v(" "),t("p",[a._v("这个requestId的形式也是可以自定义的。你可以按照自己的规则生成，也可以传入本来已有的TraceId来和系统做集成。")]),a._v(" "),t("h2",{attrs:{id:"按照自己的规则生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照自己的规则生成"}},[a._v("#")]),a._v(" 按照自己的规则生成")]),a._v(" "),t("p",[a._v("你只需要要声明一个类，然后实现"),t("code",[a._v("RequestIdGenerator")]),a._v("接口即可：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CustomRequestIdGenerator")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RequestIdGenerator")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("generate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nanoTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("然后在LiteFlow的配置文件里声明下你这个类即可：")]),a._v(" "),t("div",{staticClass:"language-properties extra-class"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("liteflow.request-id-generator-class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("com.yomahub.liteflow.test.requestId.config.CustomRequestIdGenerator")]),a._v("\n")])])]),t("p",[a._v("一般情况下，LiteFlow有自己默认的Id生成规则。所以大多数情况下你并不需要去特别自定义这个Id生成器。")]),a._v(" "),t("h2",{attrs:{id:"传入已有的requestid-traceid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传入已有的requestid-traceid"}},[a._v("#")]),a._v(" 传入已有的requestId/traceId")]),a._v(" "),t("p",[a._v("LiteFlow在v2.10.5版本中对于这个特性给予了支持。在FlowExecutor进行调用的时候，你可以调用如下方法来传入一个已有的requestId：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LiteflowResponse")]),a._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" flowExecutor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("execute2RespWithRid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"chain1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"T001234"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("YourContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("那么，这个链路中所有的框架日志前，都会带有[T001234]这个传入的ID了。")]),a._v(" "),t("h2",{attrs:{id:"给组件中的日志也加上请求id前缀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#给组件中的日志也加上请求id前缀"}},[a._v("#")]),a._v(" 给组件中的日志也加上请求ID前缀")]),a._v(" "),t("p",[a._v("值得一提的是，LiteFlow还提供了一个日志包装类。只要你在组件中把slf4j的日志声明换成如下形式，那么你在组件中自己打出的日志也会带有请求ID前缀。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LFLog")]),a._v(" logger "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LFLoggerManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getLogger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FlowExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("其中"),t("code",[a._v("LFLog")]),a._v("这个类是继承自slf4j的"),t("code",[a._v("Logger")]),a._v("类的，所以它的使用方式和"),t("code",[a._v("Logger")]),a._v("是完全一致的。")]),a._v(" "),t("p",[a._v("你只需要把定义换一下就ok了。")]),a._v(" "),t("p",[a._v("如果在一个链路中相同请求的日志都拥有同一个请求ID，那么对于定位问题来说，会很方便。推荐大家使用此特性。")])])}),[],!1,null,null,null);t.default=n.exports}}]);