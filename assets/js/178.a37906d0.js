(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{640:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("p",[t._v("如果你要并行执行a,b,c三个组件，你可以用"),a("code",[t._v("WHEN")]),t._v("关键字，需要注意的是，"),a("code",[t._v("WHEN")]),t._v("必须大写。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    WHEN(a, b, c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"等价用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等价用法"}},[t._v("#")]),t._v(" 等价用法")]),t._v(" "),a("p",[t._v("由于"),a("code",[t._v("WHEN")]),t._v("关键字用来表示并行语义上并不是很妥当，所以后期版本同时支持了"),a("code",[t._v("PAR")]),t._v("关键字，和"),a("code",[t._v("WHEN")]),t._v("是完全等价的。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    PAR(a, b, c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"和串行嵌套起来-一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和串行嵌套起来-一"}},[t._v("#")]),t._v(" 和串行嵌套起来(一)")]),t._v(" "),a("p",[t._v("接下来，让我们把"),a("code",[t._v("THEN")]),t._v("和"),a("code",[t._v("WHEN")]),t._v("结合起来用，看一个示例：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, c, d),\n        e\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e2.svg")}})]),t._v(" "),a("p",[t._v("在以上示例里，b,c,d默认并行都执行完毕后，才会执行e。")]),t._v(" "),a("h2",{attrs:{id:"和串行嵌套起来-二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和串行嵌套起来-二"}},[t._v("#")]),t._v(" 和串行嵌套起来(二)")]),t._v(" "),a("p",[t._v("上面的示例应该很好理解吧，那么再看一个示例：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, THEN(c, d)),\n        e\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e3.svg")}})]),t._v(" "),a("h2",{attrs:{id:"忽略错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略错误"}},[t._v("#")]),t._v(" 忽略错误")]),t._v(" "),a("p",[a("code",[t._v("WHEN")]),t._v("关键字提供了一个子关键字"),a("code",[t._v("ignoreError")]),t._v("(默认为false)来提供忽略错误的特性，用法如下：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, c, d).ignoreError(true),\n        e\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e2.svg")}})]),t._v(" "),a("p",[t._v("以上假设b,c,d中任一一个节点有异常，那么最终e仍旧会被执行。")]),t._v(" "),a("h2",{attrs:{id:"任一节点先执行完则忽略其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任一节点先执行完则忽略其他"}},[t._v("#")]),t._v(" 任一节点先执行完则忽略其他")]),t._v(" "),a("p",[a("code",[t._v("WHEN")]),t._v("关键字提供了一个子关键字"),a("code",[t._v("any")]),t._v("(默认为false)用来提供并行流程中，任一条分支先执行完即忽略其他分支，继续执行的特性。用法如下：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, THEN(c, d), e).any(true),\n        f\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e4.svg")}})]),t._v(" "),a("p",[t._v("以上流程，假设e节点先执行完，那么不管其他分支是否执行完，会立马执行节点f。")]),t._v(" "),a("h2",{attrs:{id:"指定任意节点先执行完则忽略其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定任意节点先执行完则忽略其他"}},[t._v("#")]),t._v(" 指定任意节点先执行完则忽略其他"),a("Badge",{attrs:{text:"v2.11.1+"}})],1),t._v(" "),a("p",[t._v("LiteFlow支持了并行编排中指定节点的执行则忽略其他，"),a("code",[t._v("WHEN")]),t._v(" 关键字新增子关键字 "),a("code",[t._v("must")]),t._v(" (不可为空)，可用于指定需等待执行的任意节点，可以为 1 个或者多个，若指定的所有节点率先完成，则继续往下执行，忽略同级别的其他任务，用法如下：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        a,\n        WHEN(b, c, d).must(b, c),\n        f\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("以上流程中，"),a("code",[t._v("must")]),t._v("指定了b,c，则b，c是一定会被执行完毕了，如果b，c执行完毕了后d还未执行完，则忽略，直接执行下一个组件f。")]),t._v(" "),a("p",[t._v("以上是单节点的用法，must还可以指定一个或多个表达式。比如")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n    THEN(\n        a,\n        WHEN(b, THEN(c, d).id("t1"), e).must(b, "t1"),\n        f\n    );\n'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("在这个表达式中"),a("code",[t._v("WHEN")]),t._v("里有一个嵌套的"),a("code",[t._v("THEN")]),t._v("，如果需要指定这个表达式，则需要给这个表达式设置一个id，"),a("code",[t._v("must")]),t._v("里需要指定这个id，需要注意的是，"),a("code",[t._v("must")]),t._v("里指定id，需要用引号括起来。")]),t._v(" "),a("h2",{attrs:{id:"开启when线程池隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启when线程池隔离"}},[t._v("#")]),t._v(" 开启WHEN线程池隔离"),a("Badge",{attrs:{text:"v2.11.1+"}})],1),t._v(" "),a("p",[t._v("目前liteflow设计里when线程池，如果你不单独设置自定义线程池，那么就会用默认的线程池。而这个线程池，是所有的when共同一个。")]),t._v(" "),a("p",[t._v("LiteFlow从2.11.1开始，提供一个"),a("code",[t._v("liteflow.when-thread-pool-isolate")]),t._v("参数，默认为"),a("code",[t._v("false")]),t._v("，如果设为"),a("code",[t._v("true")]),t._v("，则会开启WHEN的线程池隔离机制，这意味着每一个when都会有单独的线程池。这个特性对于运行复杂的嵌套when时是可以提升运行速度的且规避掉一些锁的问题。")]),t._v(" "),a("p",[t._v("你可以如下配置来开启：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.when-thread-pool-isolate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n")])])]),a("h2",{attrs:{id:"关于组的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于组的概念"}},[t._v("#")]),t._v(" 关于组的概念")]),t._v(" "),a("p",[t._v("在以前的版本中，并行编排有组(group)的概念，而在2.8.X版本中，我们去除了组的概念。")]),t._v(" "),a("p",[t._v("用EL表达式，其实你写2个不同的WHEN就是2个组。比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        WHEN(a, b, c, d)\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("以上abcd都在同一个并行组中。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        WHEN(a, b),\n        WHEN(c, d)\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("以上例子，ab是一个并行组，而cd是另一个并行组。")])])}),[],!1,null,null,null);a.default=e.exports}}]);