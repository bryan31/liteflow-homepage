(window.webpackJsonp=window.webpackJsonp||[]).push([[572],{1033:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("LiteFlow从2.8.5版本开始，提供了条件编排表达式组合。")]),t._v(" "),a("p",[t._v("条件编排是选择编排一个变种，选择编排是根据逻辑去选择多个子项中的一项。而条件编排只有真和假2个子项，这处理某些业务的过程中非常有用。")]),t._v(" "),a("p",[t._v("其实简单来说，条件编排就是变成语言中的if else。只不过在LiteFlow EL语法中有一些不一样的用法。")]),t._v(" "),a("p",[t._v("以下"),a("code",[t._v("IF")]),t._v("和"),a("code",[t._v("ELIF")]),t._v("的第一个参数要求定义"),a("code",[t._v("条件组件")]),t._v("，关于如何定义请参考"),a("RouterLink",{attrs:{to:"/pages/v2.8.X/cb0b59/"}},[t._v("条件组件")]),t._v("这一章节。")],1),t._v(" "),a("h2",{attrs:{id:"if的二元表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if的二元表达式"}},[t._v("#")]),t._v(" IF的二元表达式")]),t._v(" "),a("p",[t._v("我们先来看"),a("code",[t._v("IF")]),t._v("关键字的二元表达式：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        IF(x, a),\n        b\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e11.svg")}})]),t._v(" "),a("p",[t._v("其中x为条件节点，为真的情况下，执行链路就为x->a->b，为假链路就为x->b。")]),t._v(" "),a("h2",{attrs:{id:"if的三元表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if的三元表达式"}},[t._v("#")]),t._v(" IF的三元表达式")]),t._v(" "),a("p",[t._v("我们接下来再来看"),a("code",[t._v("IF")]),t._v("关键字的三元表达式：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        IF(x, a, b),\n        c\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e12.svg")}})]),t._v(" "),a("p",[t._v("其中x为条件节点，为真的情况下，执行链路就为x->a->c，为假链路就为x->b->c。")]),t._v(" "),a("h2",{attrs:{id:"else表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#else表达式"}},[t._v("#")]),t._v(" ELSE表达式")]),t._v(" "),a("p",[t._v("LiteFlow也提供了"),a("code",[t._v("ELSE")]),t._v("表达式，"),a("code",[t._v("IF")]),t._v("的二元表达式+"),a("code",[t._v("ELSE")]),t._v("表达式等同于"),a("code",[t._v("IF")]),t._v("三元表达式，比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    IF(x, a).ELSE(b);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("其实就等同于：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    IF(x, a, b);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"elif表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elif表达式"}},[t._v("#")]),t._v(" ELIF表达式")]),t._v(" "),a("p",[a("code",[t._v("ELIF")]),t._v("关键字的用法其实和java语言的else if类似，可以跟多个，和"),a("code",[t._v("IF")]),t._v("二元表达式参数一样，一般最后还会跟个"),a("code",[t._v("ELSE")]),t._v("，用于多重条件的判断：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    IF(x1, a).ELIF(x2, b).ELIF(x3, c).ELIF(x4, d).ELSE(THEN(m, n));\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("图示")]),t._v(" "),a("img",{staticClass:"no-zoom",staticStyle:{zoom:"80%"},attrs:{src:t.$withBase("/img/flow_example/e13.svg")}})]),t._v(" "),a("p",[t._v("其实写过代码的，对这个表达式应该很好理解。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意一")]),t._v(" "),a("p",[t._v("值得注意的是，只有"),a("code",[t._v("IF")]),t._v("的二元表达式后面才能跟"),a("code",[t._v("ELIF")]),t._v("，如果"),a("code",[t._v("IF")]),t._v("三元表达式后面跟"),a("code",[t._v("ELIF")]),t._v("，最后一个表达式会被"),a("code",[t._v("ELIF")]),t._v("的表达式覆盖，就比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    IF(x1, a, b).ELIF(x2, c).ELSE(d);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("这样x1即使为false，也不会执行到b，会去判断x2。虽然框架做了容错处理，但是我们在写表达式的时候，不推荐这样写。容易造成理解上的困扰。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意二")]),t._v(" "),a("p",[t._v("其实"),a("code",[t._v("IF")]),t._v("三元表达式已经能表达一切的可能了，有多重条件也可以不用"),a("code",[t._v("ELIF")]),t._v("，可以用嵌套来完成，比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    IF(\n        x1,\n        a, \n        IF(\n            x2,\n            b,\n            IF(x3, c, d)\n        )\n    );\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("但是官方依旧不推荐你这么写，多重嵌套在理解起来会比较吃力，所以尽量用"),a("code",[t._v("ELIF")]),t._v("来代替。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);