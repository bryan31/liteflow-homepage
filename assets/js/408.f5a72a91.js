(window.webpackJsonp=window.webpackJsonp||[]).push([[408],{871:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("LiteFlow从2.10.0开始，EL表达式语法中新增了捕获异常的表达式")]),t._v(" "),a("h2",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("p",[t._v("具体用法为"),a("code",[t._v("CATCH")]),t._v("..."),a("code",[t._v("DO")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    CATCH(\n        THEN(a,b)\n    ).DO(c)\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("上述语法表示，如果a组件出现异常并抛出，则不会执行b组件，会直接执行c组件。")]),t._v(" "),a("p",[t._v("在c组件中，可以通过"),a("code",[t._v("this.getSlot().getException()")]),t._v("来获取异常。")]),t._v(" "),a("p",[t._v("同时，当用了"),a("code",[t._v("CATCH")]),t._v("表达式之后，即便在"),a("code",[t._v("CATCH")]),t._v("包裹的组件有异常抛出，整个流程返回的"),a("code",[t._v("LiteflowResponse")]),t._v("中的"),a("code",[t._v("isSuccess")]),t._v("方法仍然为"),a("code",[t._v("true")]),t._v("，"),a("code",[t._v("getCause")]),t._v("中也没有任何的Exception。如果你写过java程序，应该会对这样的机制很容易理解。因为异常已经被你自己处理掉了。")]),t._v(" "),a("p",[t._v("同时"),a("code",[t._v("CATCH")]),t._v("也可以不加"),a("code",[t._v("DO")]),t._v("，比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    THEN(\n        CATCH(\n            THEN(a,b)\n        ),\n        c\n    )\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("上面这段表达式不管a,b有没有抛出异常，最终总会执行c。如果a抛出异常，那么最终执行链路就为"),a("code",[t._v("a==>c")])]),t._v(" "),a("h2",{attrs:{id:"搭配循环使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭配循环使用"}},[t._v("#")]),t._v(" 搭配循环使用")]),t._v(" "),a("p",[a("code",[t._v("CATCH")]),t._v("表达式和循环表达式搭配起来使用，还能做出java中"),a("code",[t._v("continue")]),t._v("的效果，比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    FOR(x).DO(\n        CATCH(\n            THEN(a,b,c)\n        )\n    )\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("如果你希望在b组件中达成某一个条件就不执行c，继续循环，那么你可以借助"),a("code",[t._v("CATCH")]),t._v("语法，只要在b组件中往外抛一个异常即可。")]),t._v(" "),a("p",[t._v("我相信这种用法对于写程序的同学来说，应该不用过多解释。")])])}),[],!1,null,null,null);a.default=e.exports}}]);