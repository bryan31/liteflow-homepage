(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{519:function(a,t,s){"use strict";s.r(t);var n=s(8),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("LiteFlow支持了前置编排和后置编排特性。")]),a._v(" "),t("p",[a._v("此特性针对整个链路，在链路之前之后固定执行某些组件。用于业务的前置处理和后置处理。")]),a._v(" "),t("p",[a._v("前置组件和后置组件，均为串行节点，目前不支持异步。")]),a._v(" "),t("h2",{attrs:{id:"前置组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前置组件"}},[a._v("#")]),a._v(" 前置组件")]),a._v(" "),t("p",[a._v("固定在一个流程开始之前执行某些节点，规则表达式中用"),t("code",[a._v("PRE")]),a._v("关键字(必须大写)来表示:")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    THEN(\n        PRE(p1, p2), \n        a, b, c, \n        WHEN(d, e)\n    );\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h2",{attrs:{id:"后置节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后置节点"}},[a._v("#")]),a._v(" 后置节点")]),a._v(" "),t("p",[a._v("固定在一个流程结束后执行某些节点，要注意的是后置节点不受Exception影响，即便节点出错，后置节点依旧会执行。在规则表达式中用"),t("code",[a._v("FINALLY")]),a._v("关键字(必须大写)表示：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    THEN(\n        a, b, c, \n        FINALLY(f1, f2)\n    );\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h2",{attrs:{id:"顺序问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序问题"}},[a._v("#")]),a._v(" 顺序问题")]),a._v(" "),t("p",[a._v("前置节点一定要写在前面吗？后置节点一定要写在最后吗？")]),a._v(" "),t("p",[a._v("并不是，"),t("code",[a._v("PRE")]),a._v("和"),t("code",[a._v("FINALLY")]),a._v("可以写在任意地方。")]),a._v(" "),t("p",[a._v("举个例子：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    THEN(\n        PRE(a), c, d, FINALLY(f1, f2)\n    );\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("下面这个表达式和上面是等价效果的, 即使不放在相对应的位置，还是一样的效果。")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    THEN(\n        FINALLY(f1, f2), c, PRE(a), d\n    );\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h2",{attrs:{id:"层级和范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#层级和范围"}},[a._v("#")]),a._v(" 层级和范围")]),a._v(" "),t("p",[a._v("LiteFlow 2.9.5中能支持"),t("code",[a._v("PRE")]),a._v("和"),t("code",[a._v("FINALLY")]),a._v("写在表达式的任意层级。也意味着你在子流程中，子变量中也可以用前置和后置组件。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[t("code",[a._v("PRE")]),a._v("和"),t("code",[a._v("FINALLY")]),a._v("只能写在"),t("code",[a._v("THEN")]),a._v("表达式中，如果你写在"),t("code",[a._v("WHEN")]),a._v("表达式中或者其他诸如"),t("code",[a._v("SWITCH")]),a._v(","),t("code",[a._v("IF")]),a._v("的表达式中，是不会生效的，而且这样写也是毫无意义的。这点需要注意下。")])]),a._v(" "),t("p",[a._v("比如你可以这么写：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    c1 = THEN(PRE(p1, p2), THEN(a, b, c), FINALLY(f1, f2));\n    THEN(PRE(p1, p2), c1, FINALLY(f1));\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("最终执行结果就是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("p1==>p2==>p1==>p2==>a==>b==>c==>f1==>f2==>f1\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);