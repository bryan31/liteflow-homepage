(window.webpackJsonp=window.webpackJsonp||[]).push([[564],{1027:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),s("p",[t._v("如果你不想用本地的配置，也不打算使用zk作为配置持久化工具。LiteFlow支持自定义的配置源的扩展点。")]),t._v(" "),s("p",[t._v("XML形式的规则文件请继承"),s("code",[t._v("ClassXmlFlowELParser")])]),t._v(" "),s("p",[t._v("JSON形式的规则文件请继承"),s("code",[t._v("ClassJsonFlowELParser")])]),t._v(" "),s("p",[t._v("YML形式的规则文件请继承"),s("code",[t._v("ClassYmlFlowELParser")])]),t._v(" "),s("p",[t._v("以下以XML形式的自定义源配置类举例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestCustomParser")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassXmlFlowELParser")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseCustom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"进入自定义parser"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" xmlContent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里需要自己扩展从自定义的地方获取配置")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" xmlContent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示一")]),t._v(" "),s("p",[t._v("自定义配置源这个类也会自动注入到spring的上下文中，所以在这个类里可以随意注入spring上下文中的bean，可以使用"),s("code",[t._v("@Autowired")]),t._v("和"),s("code",[t._v("@Resources")]),t._v("等标签")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示二")]),t._v(" "),s("p",[t._v("自定义配置源实现类里需要你返回所有的配置文件文本内容。这样也意味着如果你存于数据库中，要存储所有的规则文件文本。")]),t._v(" "),s("p",[t._v("如果你想把规则细节都存于数据库中，而不是存整段规则文本的话 ，请参考"),s("RouterLink",{attrs:{to:"/pages/v2.8.X/9aa85a/"}},[t._v("用代码动态构造规则")]),t._v("这章节。")],1)]),t._v(" "),s("h2",{attrs:{id:"配置路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置路径"}},[t._v("#")]),t._v(" 配置路径")]),t._v(" "),s("p",[t._v("以下以Springboot的配置做例子，Spring以及非Spring的环境配置可以详细阅读"),s("RouterLink",{attrs:{to:"/pages/v2.8.X/b70ec8/"}},[t._v("配置项")]),t._v("这章节。")],1),t._v(" "),s("p",[t._v("你只需要把rule-source改成你自定义规则配置源的类即可")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.rule-source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("el_xml:com.yomahub.liteflow.test.TestCustomParser")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("关于el_xml这种标签头")]),t._v(" "),s("p",[t._v("LiteFlow不光支持xml配置方式，还支持json，yml的配置方式，这里"),s("code",[t._v("el_xml:")]),t._v("开头是表明这里读取的内容是xml形式的配置，并以EL的方式进行解析。关于规则文件支持格式请详细阅读"),s("RouterLink",{attrs:{to:"/pages/v2.8.X/6fa87e/"}},[t._v("规则文件格式")]),t._v("这章。")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);