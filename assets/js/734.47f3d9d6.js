(window.webpackJsonp=window.webpackJsonp||[]).push([[734],{1197:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("LiteFlow v2.9.0版本带来了大量的特性，一共19个issue，还有数不清的优化。是所有发布的版本中特性最多的一次。")]),t._v(" "),a("p",[t._v("我们纵向拓展了LiteFlow的深度，赋予新版本的LiteFlow在编排时拥有更多的能力，适应更多的场景。")]),t._v(" "),a("p",[t._v("我们也同时横向拓展了LiteFlow的广度，推出了规则插件机制，赋予LiteFlow能支持更多的中间件的能力。")]),t._v(" "),a("p",[t._v("让我们一起来看看此次2.9.0版本中我们新增了哪些激动人心的特性吧。")]),t._v(" "),a("h2",{attrs:{id:"循环表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环表达式"}},[t._v("#")]),t._v(" 循环表达式")]),t._v(" "),a("p",[t._v("虽然之前LiteFlow在表达式层面拥有诸多的关键字，可以满足大部分的编排场景。但是在循环层面，并没有原生提供语法来支持。很多小伙伴只能依靠隐式流程自己来完成循环操作。")]),t._v(" "),a("p",[t._v("在2.9.0版本中，我们新增了"),a("code",[t._v("次数循环表达式")]),t._v("和"),a("code",[t._v("条件循环表达式")]),t._v("。")]),t._v(" "),a("p",[t._v("次数循环表达式：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 直接写数字 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    FOR(5).DO(THEN(a, b, c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 在java组件里获取次数 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    FOR(x).DO(THEN(a, b, c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("条件循环表达式：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    WHILE(w).DO(THEN(a, b, c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("退出循环关键字：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- BREAK可以和FOR...DO连用 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    FOR(x).DO(THEN(a, b).BREAK(c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- BREAK可以和WHILE...DO连用 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    WHILE(w).DO(THEN(a, b).BREAK(c);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于循环表达式的详细说明请查看"),a("RouterLink",{attrs:{to:"/pages/fbf715/"}},[t._v("循环编排")]),t._v("章节。")],1)]),t._v(" "),a("h2",{attrs:{id:"中间件的原生存储支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件的原生存储支持"}},[t._v("#")]),t._v(" 中间件的原生存储支持")]),t._v(" "),a("p",[t._v("之前LiteFlow只支持本地文件和zk方式存储，如果你想用其他的方式存储规则，LiteFlow提供了扩展接口，需要使用者自己去实现。")]),t._v(" "),a("p",[t._v("这无疑增加了一些使用成本。")]),t._v(" "),a("p",[t._v("在v2.9.0版本中，官方从底层推出了规则存储插件机制，并一口气推出了SQL数据库，Nacos，Etcd的支持，当然之前的ZK支持也独立出了插件。")]),t._v(" "),a("p",[t._v("使用插件，你无需再去自己扩展接口实现。只需引入插件。配置参数即可。大大降低了使用成本。")]),t._v(" "),a("p",[t._v("当然，对于没提供的中间件插件实现，你依旧可以自行扩展去实现。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("ZK规则插件详细说明："),a("RouterLink",{attrs:{to:"/pages/ffc345/"}},[t._v("ZK规则文件配置源")])],1),t._v(" "),a("p",[t._v("SQL数据库规则插件详细说明："),a("RouterLink",{attrs:{to:"/pages/236b4f/"}},[t._v("SQL数据库配置源")])],1),t._v(" "),a("p",[t._v("Nacos规则插件详细说明："),a("RouterLink",{attrs:{to:"/pages/09b776/"}},[t._v("Nacos配置源")])],1),t._v(" "),a("p",[t._v("Etcd规则插件详细说明："),a("RouterLink",{attrs:{to:"/pages/4bfac2/"}},[t._v("Etcd配置源")])],1)]),t._v(" "),a("h2",{attrs:{id:"方法级的声明式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法级的声明式组件"}},[t._v("#")]),t._v(" 方法级的声明式组件")]),t._v(" "),a("p",[t._v("之前LiteFlow推出了声明式组件，不知道大家都用过没。")]),t._v(" "),a("p",[t._v("声明式组件有一个最大的好处就是无侵入，你仅需通过注解就可以定义出一个组件。提供了自由扩展的可能。")]),t._v(" "),a("p",[t._v("但是类声明组件也是需要一个类对应一个组件。如果你的组件超多，达到上百个，那就需要定义上百个类。造成了类爆炸的现象，不好管理。")]),t._v(" "),a("p",[t._v("v2.9.0推出的方法级的声明式组件正好能解决这个痛点。新版本允许你在一个类里通过方法上的注解完成多个组件的声明。这一切仅仅需要一个注解即可完成。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于方法级的声明式的详细使用方法请参考："),a("RouterLink",{attrs:{to:"/pages/797830/"}},[t._v("方法级别式声明")])],1)]),t._v(" "),a("h2",{attrs:{id:"任意bean均可引入至脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意bean均可引入至脚本"}},[t._v("#")]),t._v(" 任意Bean均可引入至脚本")]),t._v(" "),a("p",[t._v("早在2.6.X的时候LiteFlow就支持了脚本编写，有些易变且简单的逻辑你可以用脚本来进行编写。")]),t._v(" "),a("p",[t._v("但是之前的版本，脚本里只能引用上下文。")]),t._v(" "),a("p",[t._v("有的小伙伴希望脚本拥有更多的能力，让脚本和java代码之间拥有更多的交互，比如用脚本读个文件？比如用脚本进行一次RPC的调用？")]),t._v(" "),a("p",[t._v("这次v2.9.0带来了新的特性，任意Bean均可引入至脚本，换而言之，就是在脚本里可以调用任意Java Bean的对象。")]),t._v(" "),a("p",[t._v("这一切只需要一个注解即可完成。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于脚本与Java之间交互的增强的详细使用方法请参考："),a("RouterLink",{attrs:{to:"/pages/d861c8/"}},[t._v("与Java进行交互")])],1)]),t._v(" "),a("h2",{attrs:{id:"支持单组件的多定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持单组件的多定义"}},[t._v("#")]),t._v(" 支持单组件的多定义")]),t._v(" "),a("p",[t._v("LiteFlow之前的版本是不支持单组件多定义的，也就是把一个组件定义成不同的NodeId。如果你这样去定义，那这个组件总是被最后一个NodeId所覆盖。")]),t._v(" "),a("p",[t._v("v2.9.0现在支持了这种定义方式，你可以用动态代码来构建组件，给同一个组件构建不同的nodeId。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于动态代码构建组件的详细使用方法请参考："),a("RouterLink",{attrs:{to:"/pages/6bc8fe/"}},[t._v("如何动态构造")])],1)]),t._v(" "),a("h2",{attrs:{id:"组件级别的规则参数设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件级别的规则参数设置"}},[t._v("#")]),t._v(" 组件级别的规则参数设置")]),t._v(" "),a("p",[t._v("之前LiteFlow在规则层面是没法给组件设置额外的参数的。")]),t._v(" "),a("p",[t._v("参数只有request层面的参数，由FlowExecutor调用的时候传入。大多数情况，reqeust传入的参数就已经够用了。")]),t._v(" "),a("p",[t._v("但是当相同组件进行编排时，可能要在不同的位置设置不同的组件级参数，就没办法做到了。")]),t._v(" "),a("p",[t._v("这次v2.9.0版本带来了这一特性的支持，新增了"),a("code",[t._v("data")]),t._v("关键词，你可以这样使用：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n    cmpData = \'{"name":"jack","age":27,"birth":"1995-10-01"}\';\n\n    THEN(\n        a,\n        b.data(cmpData),\n        c\n    );\n'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于组件参数的使用详细请参考："),a("RouterLink",{attrs:{to:"/pages/6e4d15/"}},[t._v("组件参数")])],1)]),t._v(" "),a("h2",{attrs:{id:"选择组件支持标签选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择组件支持标签选择"}},[t._v("#")]),t._v(" 选择组件支持标签选择")]),t._v(" "),a("p",[t._v("LiteFlow以前的版本对于选择组件返回参数的定义是：只能返回可执行项的id，比如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    SWITCH(s).to(a, b);\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("s组件，要么返回a，要么返回b，要么返回空，除此之外的任何其他返回都会报错提示。")]),t._v(" "),a("p",[t._v("v2.9.0现在支持对tag的选择了，你可以如下定义tag：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("chain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("chain1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n    SWITCH(s).to(a.tag("cat"), b.tag("dog"));\n'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("chain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v('那么要选择到b组件，除了可以返回"b"，还可以写返回："tag:dog"。')]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("关于选择支持标签写法的使用详细请参考："),a("RouterLink",{attrs:{to:"/pages/c0f5d7/"}},[t._v("选择组件")])],1)]),t._v(" "),a("h2",{attrs:{id:"去除了旧表达式的支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#去除了旧表达式的支持"}},[t._v("#")]),t._v(" 去除了旧表达式的支持")]),t._v(" "),a("p",[t._v("LiteFlow在v2.6.X和v2.7.X阶段是用标签表达式来编排的。")]),t._v(" "),a("p",[t._v("在v2.8.X版本全面转向了EL表达式，但是也是支持标签表达式的。算是一个兼容的版本。所以你会看到EL表达式的规则文件会要求用"),a("code",[t._v("el.xml")]),t._v("这种形式来定义。")]),t._v(" "),a("p",[t._v("但是在v2.9.0中，我们移除了标签表达式的支持。以后将只会支持全新的EL表达式。")]),t._v(" "),a("p",[t._v("所以从v2.9.0开始不再有文件扩展名的约束，你定义成"),a("code",[t._v("*.xml")]),t._v("还是"),a("code",[t._v("*.el.xml")]),t._v("都会支持。")]),t._v(" "),a("p",[t._v("为了兼容大家的文档阅读体验，避免造成理解上的错乱，文档中的示例还是保留了"),a("code",[t._v("*.el.xml")]),t._v("这种形式。这点大家注意下。")])])}),[],!1,null,null,null);a.default=e.exports}}]);