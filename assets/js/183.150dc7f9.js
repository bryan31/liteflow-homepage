(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{644:function(a,t,s){"use strict";s.r(t);var n=s(8),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("strong",[a._v("版本支持：")]),t("Badge",{attrs:{text:"v2.10.2+",vertical:"middle"}})],1),a._v(" "),t("h2",{attrs:{id:"基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[a._v("#")]),a._v(" 基本用法")]),a._v(" "),t("p",[a._v("LiteFlow提供了与或非表达式，就是"),t("code",[a._v("AND")]),a._v("，"),t("code",[a._v("OR")]),a._v("，"),t("code",[a._v("NOT")]),a._v("表达式。")]),a._v(" "),t("p",[a._v("通过之前的几小章，应该可以知道，有些编排需要返回一个布尔值，比如条件编排：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    IF(x, a, b);\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("其中x组件应该为布尔组件，返回的是一个布尔值。")]),a._v(" "),t("p",[a._v("但是如果这个布尔值并不是由一个组件决定的，而是由多个组件决定的呢。这里就可以用与或非表达式了。")]),a._v(" "),t("p",[a._v("假设这里的条件是要由x和y共同决定，利用与或非表达式中的"),t("code",[a._v("AND")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    IF(AND(x,y), a, b);\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("上述"),t("code",[a._v("AND")]),a._v("的意思是，如果x和y都为true，则为真，会执行组件a，如果x和y有一个为false，则执行b。")]),a._v(" "),t("p",[t("code",[a._v("AND")]),a._v("里面可以有多个布尔组件或者与或非表达式。")]),a._v(" "),t("p",[a._v("同理，这里也可以用"),t("code",[a._v("OR")]),a._v("来表示：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    IF(OR(x,y), a, b);\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("上述"),t("code",[a._v("OR")]),a._v("的意思是，只要x和y中的一个为true，则为真，否则为假。")]),a._v(" "),t("p",[t("code",[a._v("OR")]),a._v("里面可以有多个组件或者与或非表达式。")]),a._v(" "),t("p",[t("code",[a._v("NOT")]),a._v("就是非的意思，比如：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    IF(NOT(x), a, b);\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("如果x返回true，则经过非运算后，为假，执行b，如果x返回false，则经过非运算后，为真，执行a。")]),a._v(" "),t("p",[t("code",[a._v("NOT")]),a._v("里面只能有一个布尔组件或者与或非表达式。")]),a._v(" "),t("h2",{attrs:{id:"可以用的地方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可以用的地方"}},[a._v("#")]),a._v(" 可以用的地方")]),a._v(" "),t("p",[a._v("在LiteFlow所有EL表达式中，返回布尔值的地方都可以用与或非表达式，除了上述的"),t("code",[a._v("IF")]),a._v("外，还可以用在"),t("code",[a._v("WHILE")]),a._v("，"),t("code",[a._v("BREAK")]),a._v("表达式中。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("如果你在"),t("code",[a._v("THEN")]),a._v("表达式中用与或非表达式，会报错的，因为普通组件并非是一个布尔值的的返回。")])]),a._v(" "),t("h2",{attrs:{id:"复杂嵌套"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂嵌套"}},[a._v("#")]),a._v(" 复杂嵌套")]),a._v(" "),t("p",[a._v("与或非表达式也可以进行多级嵌套，比如：")]),a._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("chain")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("chain1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    IF(\n        OR(\n            AND(x1, x3), NOT(OR(x3, x4))\n        ),\n        a, b\n    );\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("chain")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("p",[a._v("类似于这种，其实概念和java的与或非都一样，无非就是换了种写法。")])])}),[],!1,null,null,null);t.default=e.exports}}]);