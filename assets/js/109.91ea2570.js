(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{571:function(t,e,s){"use strict";s.r(e);var a=s(8),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("LiteFlow执行一个流程是要用"),e("code",[t._v("FlowExecutor")]),t._v("来驱动的。")]),t._v(" "),e("p",[t._v("最常用的就是"),e("code",[t._v("flowExecutor.execute2Resp")]),t._v("方法，这也是官方推荐使用的方法。这个方法无论当中的节点是串行还是并行，最终当返回的时候"),e("code",[t._v("LiteflowResponse")]),t._v("对象的时候，这条链路是全部执行完毕的。")]),t._v(" "),e("p",[t._v("但是如果业务中的组件需要处理很多业务，你的主程序不想阻塞的在"),e("code",[t._v("execute2Resp")]),t._v("这个方法上的时候，你可以使用"),e("code",[t._v("flowExecutor.execute2Future")]),t._v("方法。")]),t._v(" "),e("p",[t._v("这时候，方法不再返回"),e("code",[t._v("LiteflowResponse")]),t._v("对象，而是返回"),e("code",[t._v("Future<LiteflowResponse>")]),t._v("对象，且不会阻塞。这样主线程就可以后续需要使用的地方拿到future中的"),e("code",[t._v("LiteflowResponse")]),t._v("对象，从而实现主线程无阻塞的效果。")]),t._v(" "),e("p",[t._v("当然，有"),e("code",[t._v("Future")]),t._v("对象，就一定会有线程池。这个线程池在LiteFlow是单独配置的。框架给了默认值：")]),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.main-executor-works")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("64")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("liteflow.main-executor-class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("com.yomahub.liteflow.thread.LiteFlowDefaultMainExecutorBuilder")]),t._v("\n")])])]),e("p",[t._v("当然也支持自定义线程池，你需新建一个类，然后实现"),e("code",[t._v("ExecutorBuilder")]),t._v("接口：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomThreadBuilder")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorBuilder")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);