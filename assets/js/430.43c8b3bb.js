(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{892:function(t,o,e){"use strict";e.r(o);var n=e(8),v=Object(n.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("何谓声明式组件？")]),t._v(" "),o("p",[t._v("之前章节介绍的普通组件和条件组件，在写法上需要你自己去定义一个类去继承"),o("code",[t._v("NodeComponent")]),t._v("或者"),o("code",[t._v("NodeSwitchComponent")]),t._v("。这样一方面造成了耦合，另一方面由于java是单继承制，所以使用者就无法再去继承自己的类了，在自由度上就少了很多玩法。")]),t._v(" "),o("p",[t._v("声明式组件这一特性允许你自定义的组件不继承任何类和实现任何接口，普通的类也可以依靠注解来完成LiteFlow组件的声明。")]),t._v(" "),o("p",[t._v("甚至于你可以用一个类去定义多个组件，仅仅依靠注解就可以完成，这个特性也叫做方法级别式声明。")])])}),[],!1,null,null,null);o.default=v.exports}}]);